package dev.tssvett.schedule_bot.bot.formatter;

import dev.tssvett.schedule_bot.backend.entity.Lesson;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Slf4j
@Component
public class ScheduleStringFormatter {

    private static final String ONLINE_EMOJI = "üü¢"; // –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è online
    private static final String LAB_EMOJI = "üü£"; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –∫—Ä—É–≥ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π
    private static final String LECTURE_EMOJI = "üü°"; // –ñ–µ–ª—Ç—ã–π –∫—Ä—É–≥ –¥–ª—è –ª–µ–∫—Ü–∏–π
    private static final String MILITARY_EMOJI = "üü†"; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –∫—Ä—É–≥ –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
    private static final String DEFAULT_EMOJI = "üî¥"; // –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è –æ—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π

    public String formatWeek(List<Lesson> weekLessons) {
        StringBuilder sb = new StringBuilder();

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –¥–Ω—è–º
        Map<String, List<Lesson>> lessonsByDay = groupLessonsByDay(weekLessons);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        List<String> daysOfWeek = List.of("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ");

        for (String day : daysOfWeek) {
            List<Lesson> dayLessons = lessonsByDay.get(day);
            if (dayLessons != null && !dayLessons.isEmpty()) {
                appendDaySchedule(sb, day, dayLessons);
            }
        }

        return sb.toString();
    }

    public String formatDay(List<Lesson> weekLessons, String weekDayName) {
        StringBuilder sb = new StringBuilder();
        if (weekDayName.equals("–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")) {
            weekDayName = "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫";
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –¥–Ω—è–º
        Map<String, List<Lesson>> lessonsByDay = groupLessonsByDay(weekLessons);

        List<Lesson> dayLessons = lessonsByDay.get(weekDayName);
        if (dayLessons != null && !dayLessons.isEmpty()) {
            appendDaySchedule(sb, weekDayName, dayLessons);
        }

        return sb.toString();
    }

    private Map<String, List<Lesson>> groupLessonsByDay(List<Lesson> lessons) {
        return lessons.stream()
                .filter(Lesson::isExist) // –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç
                .collect(Collectors.groupingBy(Lesson::getDateDay));
    }

    private void appendDaySchedule(StringBuilder sb, String day, List<Lesson> dayLessons) {
        String dateNumber = dayLessons.getFirst().getDateNumber(); // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞
        sb.append("üîπ ").append(capitalizeFirstLetter(day)).append(" (").append(dateNumber).append("):\n");

        for (Lesson lesson : dayLessons) {
            sb.append(formatLesson(lesson));
        }

        sb.append("\n"); // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–Ω–µ–π
    }

    private String formatLesson(Lesson lesson) {
        String emoji = getEmojiForLesson(lesson);

        return String.format(
                "%s %s\n" + // –°–º–∞–π–ª–∏–∫ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã
                        "–¢–∏–ø: %s\n" +
                        "–ú–µ—Å—Ç–æ: %s\n" +
                        "–í—Ä–µ–º—è: %s\n\n",
                emoji,
                capitalizeFirstLetter(lesson.getName()),
                lesson.getType(),
                lesson.getPlace(),
                lesson.getTime()
        );
    }

    private String getEmojiForLesson(Lesson lesson) {
        if (lesson.getPlace().equalsIgnoreCase("online")) {
            return ONLINE_EMOJI;
        } else if (lesson.getType().equalsIgnoreCase("–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è")) {
            return LAB_EMOJI;
        } else if (lesson.getType().equalsIgnoreCase("–ª–µ–∫—Ü–∏—è")) {
            return LECTURE_EMOJI;
        } else if (lesson.getName().equalsIgnoreCase("–í–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞")) {
            lesson.setType("–í–æ–µ–Ω–Ω–æ–µ"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø "–í–æ–µ–Ω–Ω–æ–µ"
            return MILITARY_EMOJI;
        } else {
            return DEFAULT_EMOJI;
        }
    }

    private String capitalizeFirstLetter(String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }
}
