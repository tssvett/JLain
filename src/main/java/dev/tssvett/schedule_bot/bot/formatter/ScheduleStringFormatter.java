package dev.tssvett.schedule_bot.bot.formatter;

import dev.tssvett.schedule_bot.backend.dto.LessonInfoDto;
import dev.tssvett.schedule_bot.backend.mapper.Mapper;
import dev.tssvett.schedule_bot.persistence.entity.Lesson;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import javax.validation.constraints.NotNull;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Slf4j
@Component
public class ScheduleStringFormatter {

    private static final String ONLINE_EMOJI = "üü¢"; // –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è online
    private static final String LAB_EMOJI = "üü£"; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –∫—Ä—É–≥ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π
    private static final String LECTURE_EMOJI = "üü°"; // –ñ–µ–ª—Ç—ã–π –∫—Ä—É–≥ –¥–ª—è –ª–µ–∫—Ü–∏–π
    private static final String MILITARY_EMOJI = "üü†"; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –∫—Ä—É–≥ –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
    private static final String DEFAULT_EMOJI = "üî¥"; // –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è –æ—á–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
    private static final String DAY_HEADER = "üîπ";

    private static final List<String> DAYS_OF_WEEK = List.of("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ");

    public String formatWeek(List<LessonInfoDto> weekLessons) {
        Map<String, List<LessonInfoDto>> lessonsByDays = groupLessonsByDay(weekLessons);
        StringBuilder sb = new StringBuilder();

        DAYS_OF_WEEK.stream()
                .filter(day -> dayHasLessons(lessonsByDays.get(day)))
                .forEach(day -> formatExistingEducationalDay(sb, day, lessonsByDays.get(day)));

        return sb.toString();
    }

    public String formatDay(List<LessonInfoDto> weekLessons, String weekDayName) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –¥–Ω—è–º
        Map<String, List<LessonInfoDto>> lessonsByDay = groupLessonsByDay(weekLessons);

        StringBuilder sb = new StringBuilder();
        List<LessonInfoDto> dayLessons = lessonsByDay.get(weekDayName);

        if (dayHasLessons(dayLessons)) {
            formatExistingEducationalDay(sb, weekDayName, dayLessons);
        } else {
            formatEmptyEducationalDay(sb, weekDayName);
        }

        return sb.toString();
    }

    private Map<String, List<LessonInfoDto>> groupLessonsByDay(List<LessonInfoDto> lessons) {
        return lessons.stream()
                .map(Mapper::toLesson)
                .filter(Lesson::isExist) // –ò—Å–∫–ª—é—á–∞–µ–º –æ–∫–Ω–∞(–ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç) –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
                .map(Mapper::toLessonInfoDto)
                .collect(Collectors.groupingBy(LessonInfoDto::dateDay));
    }

    private void formatExistingEducationalDay(StringBuilder sb, String day, @NotNull List<LessonInfoDto> dayLessons) {
        String lessonDate = dayLessons.get(0).dateNumber();

        sb.append(createDayHeader(day, lessonDate));
        dayLessons.forEach(lesson -> sb.append(formatLesson(lesson)));
        sb.append("\n");
    }

    private void formatEmptyEducationalDay(StringBuilder sb, String weekDayName) {
        String currentDate = LocalDate.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
        sb.append(String.format("""
                %s %s (%s):
                –ó–∞—á–∏–ª—å—Å—è, –ø–∞—Ä –Ω–µ—Ç :)
                """, DAY_HEADER, capitalizeFirstLetter(weekDayName), currentDate));
        sb.append("\n");
    }

    private String createDayHeader(String day, String lessonDate) {
        return String.format("""
                %s %s (%s):
                """, DAY_HEADER, capitalizeFirstLetter(day), lessonDate);
    }

    private String formatLesson(LessonInfoDto lesson) {
        return String.format("""
                        %s %s
                        –¢–∏–ø: %s
                        –ú–µ—Å—Ç–æ: %s
                        –í—Ä–µ–º—è: %s
                                    
                        """, getEmojiForLesson(lesson), capitalizeFirstLetter(lesson.name()),
                lesson.type(),
                lesson.place(),
                lesson.time());
    }

    private String getEmojiForLesson(LessonInfoDto lesson) {
        String place = lesson.place().toLowerCase();
        String type = lesson.type().toLowerCase();
        String name = lesson.name().toLowerCase();

        if ("online".equals(place)) {
            return ONLINE_EMOJI;
        }

        return switch (type) {
            case "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è" -> LAB_EMOJI;
            case "–ª–µ–∫—Ü–∏—è" -> LECTURE_EMOJI;
            default -> "–≤–æ–µ–Ω–Ω–∞—è –∫–∞—Ñ–µ–¥—Ä–∞".equals(name) ? MILITARY_EMOJI : DEFAULT_EMOJI;
        };
    }

    private boolean dayHasLessons(List<LessonInfoDto> dayLessons) {
        return dayLessons != null && !dayLessons.isEmpty();
    }

    private String capitalizeFirstLetter(String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }
}
